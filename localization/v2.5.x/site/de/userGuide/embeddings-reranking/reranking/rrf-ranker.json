{"codeList":["from pymilvus import RRFRanker\n\nranker = RRFRanker(100)\n","import io.milvus.v2.service.vector.request.ranker.RRFRanker;\n\nRRFRanker ranker = new RRFRanker(100);\n","ranker := milvusclient.NewRRFReranker().WithK(100)\n","ranker: RRFRanker(\"100\")\n","\"ranker\": {\n    \"strategy\": \"rrf\",\n    \"params\": {\n        \"k\": 100\n    }\n}\nexport ranker='{\n        \"strategy\": \"rrf\",\n        \"params\": {\"k\": 100}\n    }'\n","# Python\nfrom pymilvus import AnnSearchRequest\n\n# Define text vector search request\ntext_search = AnnSearchRequest(\n    data=[\"modern dining table\"],\n    anns_field=\"text_vector\",\n    param={},\n    limit=10\n)\n\n# Define image vector search request\nimage_search = AnnSearchRequest(\n    data=[image_embedding],  # Image embedding vector\n    anns_field=\"image_vector\",\n    param={},\n    limit=10\n)\n\n# Apply RRF Ranker to product hybrid search\n# The smoothing parameter k controls the balance\nhybrid_results = milvus_client.hybrid_search(\n    collection_name,\n    [text_search, image_search],  # Multiple search requests\n    ranker=ranker,  # Apply the RRF ranker\n    limit=10,\n    output_fields=[\"product_name\", \"price\", \"category\"]\n)\n","// java\n","// nodejs\n","// go\n","# restful\n"],"headingContent":"RRF Ranker","anchorList":[{"label":"RRF-RangiererCompatible with Milvus 2.6.x","href":"RRF-Ranker","type":1,"isActive":false},{"label":"Wann sollte RRF Ranker verwendet werden?","href":"When-to-use-RRF-Ranker","type":2,"isActive":false},{"label":"Mechanismus des RRF Ranker","href":"Mechanism-of-RRF-Ranker","type":2,"isActive":false},{"label":"Beispiel f√ºr RRF Ranker","href":"Example-of-RRF-Ranker","type":2,"isActive":false},{"label":"Verwendung von RRF Ranker","href":"Usage-of-RRF-Ranker","type":2,"isActive":false}]}