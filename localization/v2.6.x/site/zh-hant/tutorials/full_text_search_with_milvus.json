{"codeList":["$ wget https://raw.githubusercontent.com/anthropics/anthropic-cookbook/refs/heads/main/skills/contextual-embeddings/data/codebase_chunks.json\n$ wget https://raw.githubusercontent.com/anthropics/anthropic-cookbook/refs/heads/main/skills/contextual-embeddings/data/evaluation_set.jsonl\n","pip install \"pymilvus[model]\" -U \n","import json\n\nfrom pymilvus import (\n    MilvusClient,\n    DataType,\n    Function,\n    FunctionType,\n    AnnSearchRequest,\n    RRFRanker,\n)\n\nfrom pymilvus.model.hybrid import BGEM3EmbeddingFunction\n\n\nclass HybridRetriever:\n    def __init__(self, uri, collection_name=\"hybrid\", dense_embedding_function=None):\n        self.uri = uri\n        self.collection_name = collection_name\n        self.embedding_function = dense_embedding_function\n        self.use_reranker = True\n        self.use_sparse = True\n        self.client = MilvusClient(uri=uri)\n\n    def build_collection(self):\n        if isinstance(self.embedding_function.dim, dict):\n            dense_dim = self.embedding_function.dim[\"dense\"]\n        else:\n            dense_dim = self.embedding_function.dim\n\n        tokenizer_params = {\n            \"tokenizer\": \"standard\",\n            \"filter\": [\n                \"lowercase\",\n                {\n                    \"type\": \"length\",\n                    \"max\": 200,\n                },\n                {\"type\": \"stemmer\", \"language\": \"english\"},\n                {\n                    \"type\": \"stop\",\n                    \"stop_words\": [\n                        \"a\",\n                        \"an\",\n                        \"and\",\n                        \"are\",\n                        \"as\",\n                        \"at\",\n                        \"be\",\n                        \"but\",\n                        \"by\",\n                        \"for\",\n                        \"if\",\n                        \"in\",\n                        \"into\",\n                        \"is\",\n                        \"it\",\n                        \"no\",\n                        \"not\",\n                        \"of\",\n                        \"on\",\n                        \"or\",\n                        \"such\",\n                        \"that\",\n                        \"the\",\n                        \"their\",\n                        \"then\",\n                        \"there\",\n                        \"these\",\n                        \"they\",\n                        \"this\",\n                        \"to\",\n                        \"was\",\n                        \"will\",\n                        \"with\",\n                    ],\n                },\n            ],\n        }\n\n        schema = MilvusClient.create_schema()\n        schema.add_field(\n            field_name=\"pk\",\n            datatype=DataType.VARCHAR,\n            is_primary=True,\n            auto_id=True,\n            max_length=100,\n        )\n        schema.add_field(\n            field_name=\"content\",\n            datatype=DataType.VARCHAR,\n            max_length=65535,\n            analyzer_params=tokenizer_params,\n            enable_match=True,\n            enable_analyzer=True,\n        )\n        schema.add_field(\n            field_name=\"sparse_vector\", datatype=DataType.SPARSE_FLOAT_VECTOR\n        )\n        schema.add_field(\n            field_name=\"dense_vector\", datatype=DataType.FLOAT_VECTOR, dim=dense_dim\n        )\n        schema.add_field(\n            field_name=\"original_uuid\", datatype=DataType.VARCHAR, max_length=128\n        )\n        schema.add_field(field_name=\"doc_id\", datatype=DataType.VARCHAR, max_length=64)\n        schema.add_field(\n            field_name=\"chunk_id\", datatype=DataType.VARCHAR, max_length=64\n        ),\n        schema.add_field(field_name=\"original_index\", datatype=DataType.INT32)\n\n        functions = Function(\n            name=\"bm25\",\n            function_type=FunctionType.BM25,\n            input_field_names=[\"content\"],\n            output_field_names=\"sparse_vector\",\n        )\n\n        schema.add_function(functions)\n\n        index_params = MilvusClient.prepare_index_params()\n        index_params.add_index(\n            field_name=\"sparse_vector\",\n            index_type=\"SPARSE_INVERTED_INDEX\",\n            metric_type=\"BM25\",\n        )\n        index_params.add_index(\n            field_name=\"dense_vector\", index_type=\"FLAT\", metric_type=\"IP\"\n        )\n\n        self.client.create_collection(\n            collection_name=self.collection_name,\n            schema=schema,\n            index_params=index_params,\n        )\n\n    def insert_data(self, chunk, metadata):\n        embedding = self.embedding_function([chunk])\n        if isinstance(embedding, dict) and \"dense\" in embedding:\n            dense_vec = embedding[\"dense\"][0]\n        else:\n            dense_vec = embedding[0]\n        self.client.insert(\n            self.collection_name, {\"dense_vector\": dense_vec, **metadata}\n        )\n\n    def search(self, query: str, k: int = 20, mode=\"hybrid\"):\n\n        output_fields = [\n            \"content\",\n            \"original_uuid\",\n            \"doc_id\",\n            \"chunk_id\",\n            \"original_index\",\n        ]\n        if mode in [\"dense\", \"hybrid\"]:\n            embedding = self.embedding_function([query])\n            if isinstance(embedding, dict) and \"dense\" in embedding:\n                dense_vec = embedding[\"dense\"][0]\n            else:\n                dense_vec = embedding[0]\n\n        if mode == \"sparse\":\n            results = self.client.search(\n                collection_name=self.collection_name,\n                data=[query],\n                anns_field=\"sparse_vector\",\n                limit=k,\n                output_fields=output_fields,\n            )\n        elif mode == \"dense\":\n            results = self.client.search(\n                collection_name=self.collection_name,\n                data=[dense_vec],\n                anns_field=\"dense_vector\",\n                limit=k,\n                output_fields=output_fields,\n            )\n        elif mode == \"hybrid\":\n            full_text_search_params = {\"metric_type\": \"BM25\"}\n            full_text_search_req = AnnSearchRequest(\n                [query], \"sparse_vector\", full_text_search_params, limit=k\n            )\n\n            dense_search_params = {\"metric_type\": \"IP\"}\n            dense_req = AnnSearchRequest(\n                [dense_vec], \"dense_vector\", dense_search_params, limit=k\n            )\n\n            results = self.client.hybrid_search(\n                self.collection_name,\n                [full_text_search_req, dense_req],\n                ranker=RRFRanker(),\n                limit=k,\n                output_fields=output_fields,\n            )\n        else:\n            raise ValueError(\"Invalid mode\")\n        return [\n            {\n                \"doc_id\": doc[\"entity\"][\"doc_id\"],\n                \"chunk_id\": doc[\"entity\"][\"chunk_id\"],\n                \"content\": doc[\"entity\"][\"content\"],\n                \"score\": doc[\"distance\"],\n            }\n            for doc in results[0]\n        ]\n","dense_ef = BGEM3EmbeddingFunction()\nstandard_retriever = HybridRetriever(\n    uri=\"http://localhost:19530\",\n    collection_name=\"milvus_hybrid\",\n    dense_embedding_function=dense_ef,\n)\n","path = \"codebase_chunks.json\"\nwith open(path, \"r\") as f:\n    dataset = json.load(f)\n\nis_insert = True\nif is_insert:\n    standard_retriever.build_collection()\n    for doc in dataset:\n        doc_content = doc[\"content\"]\n        for chunk in doc[\"chunks\"]:\n            metadata = {\n                \"doc_id\": doc[\"doc_id\"],\n                \"original_uuid\": doc[\"original_uuid\"],\n                \"chunk_id\": chunk[\"chunk_id\"],\n                \"original_index\": chunk[\"original_index\"],\n                \"content\": chunk[\"content\"],\n            }\n            chunk_content = chunk[\"content\"]\n            standard_retriever.insert_data(chunk_content, metadata)\n","results = standard_retriever.search(\"create a logger?\", mode=\"sparse\", k=3)\nprint(results)\n","def load_jsonl(file_path: str):\n    \"\"\"Load JSONL file and return a list of dictionaries.\"\"\"\n    with open(file_path, \"r\") as file:\n        return [json.loads(line) for line in file]\n\n\ndataset = load_jsonl(\"evaluation_set.jsonl\")\nk = 5\n\n# mode can be \"dense\", \"sparse\" or \"hybrid\".\nmode = \"hybrid\"\n\ntotal_query_score = 0\nnum_queries = 0\n\nfor query_item in dataset:\n\n    query = query_item[\"query\"]\n\n    golden_chunk_uuids = query_item[\"golden_chunk_uuids\"]\n\n    chunks_found = 0\n    golden_contents = []\n    for doc_uuid, chunk_index in golden_chunk_uuids:\n        golden_doc = next(\n            (doc for doc in query_item[\"golden_documents\"] if doc[\"uuid\"] == doc_uuid),\n            None,\n        )\n        if golden_doc:\n            golden_chunk = next(\n                (\n                    chunk\n                    for chunk in golden_doc[\"chunks\"]\n                    if chunk[\"index\"] == chunk_index\n                ),\n                None,\n            )\n            if golden_chunk:\n                golden_contents.append(golden_chunk[\"content\"].strip())\n\n    results = standard_retriever.search(query, mode=mode, k=5)\n\n    for golden_content in golden_contents:\n        for doc in results[:k]:\n            retrieved_content = doc[\"content\"].strip()\n            if retrieved_content == golden_content:\n                chunks_found += 1\n                break\n\n    query_score = chunks_found / len(golden_contents)\n\n    total_query_score += query_score\n    num_queries += 1\n","print(\"Pass@5: \", total_query_score / num_queries)\n"],"headingContent":"Full Text Search with Milvus","anchorList":[{"label":"使用 Milvus 進行全文檢索","href":"Full-Text-Search-with-Milvus","type":1,"isActive":false},{"label":"準備工作","href":"Preparation","type":2,"isActive":false},{"label":"評估","href":"Evaluation","type":2,"isActive":false}]}